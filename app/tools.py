import logging
import os
import json
from pathlib import Path
from typing import List, Dict
import gspread
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials

# Configurar logging
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv(Path(__file__).parent.parent / ".env")

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets.readonly",
]

def load_google_credentials():
    """Carga credenciales de Google Cloud desde variable de entorno."""
    service_account_json = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
    
    if not service_account_json:
        raise ValueError("GOOGLE_SERVICE_ACCOUNT_JSON es obligatorio")
    
    if service_account_json.startswith("{"):
        # Es JSON directo en variable de entorno
        logger.info("üîê Cargando credenciales desde variable de entorno")
        try:
            service_account_info = json.loads(service_account_json)
            return Credentials.from_service_account_info(service_account_info, scopes=SCOPES)
        except json.JSONDecodeError as e:
            raise ValueError(f"GOOGLE_SERVICE_ACCOUNT_JSON no es un JSON v√°lido: {e}")
    else:
        raise ValueError("GOOGLE_SERVICE_ACCOUNT_JSON debe contener el JSON completo de las credenciales")

# Inicializar cliente de Google Sheets
creds = load_google_credentials()
client = gspread.authorize(creds)

SHEET_ID = os.getenv("SHEET_ID")
if not SHEET_ID:
    raise ValueError("SHEET_ID es obligatorio")

SHEET_TAB = os.getenv("SHEET_TAB", "directory")

def normalize_specialty_search(specialty: str) -> List[str]:
    """
    Genera variaciones comunes de especialidades m√©dicas.
    Esto complementa las instrucciones del system prompt.
    """
    specialty_lower = specialty.lower().strip()
    
    # Mapeo b√°sico de especialidades comunes
    variations = [specialty_lower]
    
    # Generar variaciones autom√°ticas basadas en patrones comunes
    if "√≠a" in specialty_lower:
        # kinesiolog√≠a -> kinesiologo, kinesiologa
        base = specialty_lower.replace("√≠a", "")
        variations.extend([base + "ologo", base + "ologa", base + "ologo", base + "ologa"])
    
    if "logia" in specialty_lower:
        # cardiologia -> cardiologo, cardi√≥loga  
        base = specialty_lower.replace("logia", "")
        variations.extend([base + "logo", base + "loga", base + "√≥logo", base + "√≥loga"])
    
    # Mapeo basado en los datos REALES de la base de datos
    # T√≠tulos reales: Enfermera, Kinesi√≥logo, M√©dico, Nutricionista, TENS
    # Especialidades reales: Atenci√≥n Domiciliaria, Cardiolog√≠a, Cuidados Intensivos, Geriatr√≠a, Oncolog√≠a, Pediatr√≠a, Salud Mental, Traumatolog√≠a, Urgencias
    
    specialty_mappings = {
        # Kinesiolog√≠a/Fisioterapia -> buscar t√≠tulo "Kinesi√≥logo"
        "kinesiolog√≠a": ["kinesi√≥logo"],
        "kinesiologia": ["kinesi√≥logo"], 
        "kinesiologo": ["kinesi√≥logo"],
        "kinesiologa": ["kinesi√≥logo"],
        "kinesi√≥logo": ["kinesi√≥logo"],
        "kinesi√≥loga": ["kinesi√≥logo"],
        "kinesiologos": ["kinesi√≥logo"],
        "kinesi√≥logos": ["kinesi√≥logo"],
        "fisioterapia": ["kinesi√≥logo"],
        "fisioterapeuta": ["kinesi√≥logo"],
        "rehabilitacion": ["kinesi√≥logo"],
        
        # Cardiolog√≠a -> especialidad "Cardiolog√≠a" + t√≠tulo "M√©dico"
        "cardiolog√≠a": ["cardiolog√≠a", "m√©dico"],
        "cardiologia": ["cardiolog√≠a", "m√©dico"],
        "cardiologo": ["cardiolog√≠a", "m√©dico"],
        "cardi√≥loga": ["cardiolog√≠a", "m√©dico"],
        "cardi√≥logo": ["cardiolog√≠a", "m√©dico"],
        "coraz√≥n": ["cardiolog√≠a", "m√©dico"],
        
        # Pediatr√≠a -> especialidad "Pediatr√≠a" + t√≠tulo "M√©dico"  
        "pediatr√≠a": ["pediatr√≠a", "m√©dico"],
        "pediatria": ["pediatr√≠a", "m√©dico"],
        "pediatra": ["pediatr√≠a", "m√©dico"],
        "pediatras": ["pediatr√≠a", "m√©dico"],
        "ni√±os": ["pediatr√≠a", "m√©dico"],
        "ni√±o": ["pediatr√≠a", "m√©dico"],
        
        # Nutrici√≥n -> t√≠tulo "Nutricionista"
        "nutrici√≥n": ["nutricionista"],
        "nutricion": ["nutricionista"],
        "nutricionista": ["nutricionista"],
        "nutrologo": ["nutricionista"],
        "nutrologa": ["nutricionista"],
        "dieta": ["nutricionista"],
        "alimentacion": ["nutricionista"],
        
        # Enfermer√≠a -> t√≠tulo "Enfermera" + "TENS"
        "enfermer√≠a": ["enfermera", "tens"],
        "enfermeria": ["enfermera", "tens"],
        "enfermera": ["enfermera", "tens"],
        "enfermero": ["enfermera", "tens"],
        "tens": ["tens", "enfermera"],
        
        # Medicina General -> t√≠tulo "M√©dico"
        "medicina general": ["m√©dico"],
        "medico general": ["m√©dico"],
        "medico": ["m√©dico"],
        "m√©dico": ["m√©dico"],
        "doctor": ["m√©dico"],
        "doctora": ["m√©dico"],
        
        # Geriatr√≠a -> especialidad "Geriatr√≠a"
        "geriatr√≠a": ["geriatr√≠a"],
        "geriatria": ["geriatr√≠a"], 
        "adulto mayor": ["geriatr√≠a"],
        "tercera edad": ["geriatr√≠a"],
        
        # Traumatolog√≠a -> especialidad "Traumatolog√≠a"
        "traumatolog√≠a": ["traumatolog√≠a"],
        "traumatologia": ["traumatolog√≠a"],
        "traumatologo": ["traumatolog√≠a"],
        "traumat√≥loga": ["traumatolog√≠a"],
        "huesos": ["traumatolog√≠a"],
        "fracturas": ["traumatolog√≠a"],
        
        # Oncolog√≠a -> especialidad "Oncolog√≠a"
        "oncolog√≠a": ["oncolog√≠a"],
        "oncologia": ["oncolog√≠a"],
        "oncologo": ["oncolog√≠a"],
        "onc√≥loga": ["oncolog√≠a"],
        "cancer": ["oncolog√≠a"],
        "c√°ncer": ["oncolog√≠a"],
        
        # Salud Mental -> especialidad "Salud Mental"
        "salud mental": ["salud mental"],
        "psicolog√≠a": ["salud mental"],
        "psicologia": ["salud mental"],
        "psicologo": ["salud mental"],
        "psicologa": ["salud mental"],
        "psiquiatra": ["salud mental"],
        "depresion": ["salud mental"],
        "ansiedad": ["salud mental"],
        
        # Urgencias -> especialidad "Urgencias"
        "urgencias": ["urgencias"],
        "urgencia": ["urgencias"],
        "emergencia": ["urgencias"],
        "emergencias": ["urgencias"],
        
        # Cuidados Intensivos -> especialidad "Cuidados Intensivos"
        "cuidados intensivos": ["cuidados intensivos"],
        "uci": ["cuidados intensivos"],
        "intensivos": ["cuidados intensivos"],
        
        # Atenci√≥n Domiciliaria -> especialidad "Atenci√≥n Domiciliaria"
        "atenci√≥n domiciliaria": ["atenci√≥n domiciliaria"],
        "atencion domiciliaria": ["atenci√≥n domiciliaria"],
        "domiciliaria": ["atenci√≥n domiciliaria"],
        "domicilio": ["atenci√≥n domiciliaria"],
        "casa": ["atenci√≥n domiciliaria"],
    }
    
    if specialty_lower in specialty_mappings:
        variations.extend(specialty_mappings[specialty_lower])
    
    # Remover duplicados y mantener orden
    unique_variations = []
    for v in variations:
        if v not in unique_variations:
            unique_variations.append(v)
    
    logger.info(f"üîç Variaciones de '{specialty}': {unique_variations}")
    return unique_variations

def normalize_city_search(city: str) -> List[str]:
    """
    Normaliza la b√∫squeda de ciudad para encontrar variaciones.
    """
    city_lower = city.lower().strip()
    
    # Crear variaciones de la ciudad
    variations = [city_lower]
    
    # Si contiene "los" o "las", tambi√©n buscar sin esos art√≠culos
    if city_lower.startswith("los "):
        variations.append(city_lower.replace("los ", ""))
    elif city_lower.startswith("las "):
        variations.append(city_lower.replace("las ", ""))
    elif city_lower.startswith("la "):
        variations.append(city_lower.replace("la ", ""))
    elif city_lower.startswith("el "):
        variations.append(city_lower.replace("el ", ""))
    
    # Tambi√©n buscar si alguien busca solo la palabra principal
    # Por ejemplo "lagos" deber√≠a encontrar "los lagos"
    if not any(article in city_lower for article in ["los ", "las ", "la ", "el "]):
        variations.extend([f"los {city_lower}", f"las {city_lower}", f"la {city_lower}", f"el {city_lower}"])
    
    logger.info(f"üèôÔ∏è Variaciones de ciudad para '{city}': {variations}")
    return variations

def normalize_availability_search(availability: str) -> List[str]:
    """
    Normaliza la b√∫squeda de disponibilidad para encontrar variaciones de d√≠as y horarios.
    Maneja abreviaciones espec√≠ficas del Google Sheet como "L a V", "S√°b y Dom", etc.
    """
    availability_lower = availability.lower().strip()
    
    # Crear variaciones de disponibilidad
    variations = [availability_lower]
    
    # Mapeo de d√≠as de la semana y horarios comunes
    availability_mappings = {
        # D√≠as individuales
        "lunes": ["lunes", "monday", "lun", "l", "l a v", "lunes a viernes", "entre semana", "semana"],
        "martes": ["martes", "tuesday", "mar", "l a v", "lunes a viernes", "entre semana", "semana"],
        "mi√©rcoles": ["mi√©rcoles", "miercoles", "wednesday", "mi√©", "mie", "l a v", "lunes a viernes", "entre semana", "semana"],
        "miercoles": ["mi√©rcoles", "miercoles", "wednesday", "mi√©", "mie", "l a v", "lunes a viernes", "entre semana", "semana"],
        "jueves": ["jueves", "thursday", "jue", "l a v", "lunes a viernes", "entre semana", "semana"],
        "viernes": ["viernes", "friday", "vie", "v", "l a v", "lunes a viernes", "entre semana", "semana"],
        "s√°bado": ["s√°bado", "sabado", "saturday", "s√°b", "sab", "s√°b y dom", "sabado y domingo", "fin de semana", "fines de semana", "weekend"],
        "sabado": ["s√°bado", "sabado", "saturday", "s√°b", "sab", "s√°b y dom", "sabado y domingo", "fin de semana", "fines de semana", "weekend"],
        "domingo": ["domingo", "sunday", "dom", "s√°b y dom", "sabado y domingo", "fin de semana", "fines de semana", "weekend"],
        
        # Grupos de d√≠as (formatos del Google Sheet)
        "fin de semana": ["fin de semana", "fines de semana", "weekend", "s√°b y dom", "sabado y domingo", "s√°bado", "sabado", "domingo"],
        "fines de semana": ["fin de semana", "fines de semana", "weekend", "s√°b y dom", "sabado y domingo", "s√°bado", "sabado", "domingo"],
        "weekend": ["fin de semana", "fines de semana", "weekend", "s√°b y dom", "sabado y domingo", "s√°bado", "sabado", "domingo"],
        "entre semana": ["l a v", "lunes a viernes", "entre semana", "semana", "lunes", "martes", "mi√©rcoles", "miercoles", "jueves", "viernes"],
        "semana": ["l a v", "lunes a viernes", "entre semana", "semana", "lunes", "martes", "mi√©rcoles", "miercoles", "jueves", "viernes"],
        
        # Horarios
        "ma√±ana": ["ma√±ana", "morning", "am", "matutino", "8:00", "9:00", "10:00", "11:00"],
        "tarde": ["tarde", "afternoon", "pm", "vespertino", "14:00", "15:00", "16:00", "17:00", "18:00"],
        "noche": ["noche", "evening", "night", "nocturno", "19:00", "20:00", "21:00", "22:00"],
        "madrugada": ["madrugada", "early morning", "dawn", "6:00", "7:00"],
        
        # Urgencias
        "urgencia": ["urgencia", "emergency", "24 horas", "24/7", "siempre"],
        "emergencia": ["urgencia", "emergency", "24 horas", "24/7", "siempre"],
        "24 horas": ["urgencia", "emergency", "24 horas", "24/7", "siempre"],
        "24/7": ["urgencia", "emergency", "24 horas", "24/7", "siempre"],
    }
    
    # Buscar coincidencias en el mapeo
    for term, mappings in availability_mappings.items():
        if term in availability_lower:
            variations.extend(mappings)
    
    # Mapeo inverso: si el usuario busca un d√≠a que est√° en "L a V", debe encontrar "L a V"
    reverse_mappings = {
        # Si buscan d√≠as individuales de semana, tambi√©n buscar "L a V"
        "lunes": ["l a v", "lunes a viernes"],
        "martes": ["l a v", "lunes a viernes"], 
        "mi√©rcoles": ["l a v", "lunes a viernes"],
        "miercoles": ["l a v", "lunes a viernes"],
        "jueves": ["l a v", "lunes a viernes"],
        "viernes": ["l a v", "lunes a viernes"],
        
        # Si buscan d√≠as de fin de semana, tambi√©n buscar "S√°b y Dom"
        "s√°bado": ["s√°b y dom"],
        "sabado": ["s√°b y dom"],
        "domingo": ["s√°b y dom"],
        "fin de semana": ["s√°b y dom"],
        "fines de semana": ["s√°b y dom"],
        "weekend": ["s√°b y dom"],
    }
    
    # Aplicar mapeo inverso
    for user_term, sheet_terms in reverse_mappings.items():
        if user_term in availability_lower:
            variations.extend(sheet_terms)
    
    # Remover duplicados y mantener orden
    unique_variations = []
    for v in variations:
        if v not in unique_variations:
            unique_variations.append(v)
    
    logger.info(f"üïê Variaciones de disponibilidad para '{availability}': {unique_variations}")
    return unique_variations

def find_professionals(specialty: str, city: str, availability: str = None) -> List[Dict]:
    """Busca filas que coincidan con especialidad, ciudad y opcionalmente disponibilidad."""
    logger.info(f"üìä Conectando a Google Sheet ID: {SHEET_ID[:10]}...")
    logger.info(f"üìä Pesta√±a: {SHEET_TAB}")
    
    try:
        sheet = client.open_by_key(SHEET_ID).worksheet(SHEET_TAB)
        logger.info(f"‚úÖ Conexi√≥n exitosa a Google Sheet")
        
        rows = sheet.get_all_records()
        logger.info(f"üìä Total de registros en el sheet: {len(rows)}")
        
        if len(rows) > 0:
            logger.info(f"üìä Columnas disponibles: {list(rows[0].keys())}")
            logger.info(f"üìä Primer registro como ejemplo: {rows[0]}")
        
        # Buscar coincidencias con mapeo inteligente
        search_params = f"specialty='{specialty}', city='{city}'"
        if availability:
            search_params += f", availability='{availability}'"
        logger.info(f"üîç Buscando con par√°metros: {search_params}")
        
        specialty_terms = normalize_specialty_search(specialty)
        city_terms = normalize_city_search(city)
        availability_terms = normalize_availability_search(availability) if availability else []
        
        matches = []
        
        for i, r in enumerate(rows):
            # Buscar cualquiera de los t√©rminos de especialidad en specialty y title
            specialty_text = str(r.get("specialty", "")).lower()
            title_text = str(r.get("title", "")).lower()
            
            # Buscar cualquier variaci√≥n en specialty O en title
            specialty_match = any(term in specialty_text for term in specialty_terms)
            title_match = any(term in title_text for term in specialty_terms)
            
            # Combinar ambas b√∫squedas
            professional_match = specialty_match or title_match
            
            # Buscar cualquiera de los t√©rminos de ciudad
            coverage_area_text = str(r.get("coverage_area", "")).lower()
            city_match = any(term in coverage_area_text for term in city_terms)
            
            # Buscar disponibilidad si se especific√≥
            availability_match = True  # Por defecto True si no se especifica availability
            if availability:
                availability_text = str(r.get("availability", "")).lower()
                availability_match = any(term in availability_text for term in availability_terms)
                
                if not availability_match:
                    logger.info(f"üïê No match de disponibilidad en fila {i+1}: '{availability_text}' no contiene ninguno de {availability_terms}")
            
            if professional_match and city_match and availability_match:
                logger.info(f"‚úÖ Match completo encontrado en fila {i+1}: {r}")
                if specialty_match:
                    logger.info(f"‚úÖ Specialty match: '{specialty_text}' contiene alguno de {specialty_terms}")
                if title_match:
                    logger.info(f"‚úÖ Title match: '{title_text}' contiene alguno de {specialty_terms}")
                logger.info(f"‚úÖ City match: '{coverage_area_text}' contiene alguno de {city_terms}")
                if availability:
                    logger.info(f"‚úÖ Availability match: '{availability_text}' contiene alguno de {availability_terms}")
                matches.append(r)
            elif professional_match and city_match:
                logger.info(f"üîç Professional y city match (pero no availability) en fila {i+1}: {r}")
            elif professional_match:
                logger.info(f"üîç Professional match (pero no city/availability) en fila {i+1}: {r}")
            elif city_match:
                logger.info(f"üîç City match (pero no professional/availability) en fila {i+1}: {r}")
        
        logger.info(f"üìã Total matches encontrados: {len(matches)}")
        return matches
        
    except Exception as e:
        logger.error(f"‚ùå Error accediendo a Google Sheet: {str(e)}")
        return []


def find_professional_by_name(name: str) -> Dict:
    """Busca un profesional espec√≠fico por nombre para obtener sus datos de contacto y disponibilidad."""
    logger.info(f"üë§ Buscando profesional espec√≠fico por nombre: '{name}'")
    
    try:
        sheet = client.open_by_key(SHEET_ID).worksheet(SHEET_TAB)
        rows = sheet.get_all_records()
        
        logger.info(f"üîç Buscando en {len(rows)} registros...")
        
        for i, r in enumerate(rows):
            professional_name = str(r.get("name", "")).lower()
            if name.lower() in professional_name or professional_name in name.lower():
                # Extraer informaci√≥n espec√≠fica del profesional
                availability = r.get("availability", "No especificada")
                specialty = r.get("specialty", "No especificada")
                title = r.get("title", "No especificado")
                coverage_area = r.get("coverage_area", "No especificada")
                
                logger.info(f"‚úÖ Profesional encontrado en fila {i+1}:")
                logger.info(f"   üìã Nombre: {r.get('name', 'N/A')}")
                logger.info(f"   üè• Especialidad: {specialty}")
                logger.info(f"   üéì T√≠tulo: {title}")
                logger.info(f"   üìç √Årea de cobertura: {coverage_area}")
                logger.info(f"   üìÖ Disponibilidad: {availability}")
                logger.info(f"   üìû Contacto: {r.get('phone', 'N/A')}")
                logger.info(f"   üìß Email: {r.get('email', 'N/A')}")
                
                # Asegurar que availability est√© incluida en el resultado
                if 'availability' not in r:
                    logger.warning(f"‚ö†Ô∏è Columna 'availability' no encontrada en el registro")
                    r['availability'] = "No especificada"
                
                return r
        
        logger.info(f"‚ùå No se encontr√≥ profesional con nombre: '{name}'")
        return {}
        
    except Exception as e:
        logger.error(f"‚ùå Error buscando profesional por nombre: {str(e)}")
        return {}