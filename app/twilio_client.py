import logging
import os
from pathlib import Path
from typing import Optional

from dotenv import load_dotenv
from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse

# Cargar variables de entorno
load_dotenv(Path(__file__).parent.parent / ".env")

# Configurar logging
logger = logging.getLogger(__name__)

# Configuraci√≥n de Twilio
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_WHATSAPP_NUMBER = os.getenv("TWILIO_WHATSAPP_NUMBER")  # Ej: "whatsapp:+14155238886"

# Inicializar cliente de Twilio
twilio_client = None
if TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN:
    twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
    logger.info("‚úÖ Cliente de Twilio inicializado correctamente")
else:
    logger.warning("‚ö†Ô∏è Credenciales de Twilio no configuradas")


def is_twilio_configured() -> bool:
    """Verifica si Twilio est√° configurado correctamente."""
    return twilio_client is not None and TWILIO_WHATSAPP_NUMBER is not None


async def send_twilio_whatsapp_message(to_number: str, message: str) -> bool:
    """
    Env√≠a un mensaje de WhatsApp usando Twilio.
    
    Args:
        to_number: N√∫mero de tel√©fono del destinatario (formato: +1234567890)
        message: Texto del mensaje a enviar
        
    Returns:
        bool: True si el mensaje se envi√≥ correctamente, False en caso contrario
    """
    if not is_twilio_configured():
        logger.error("‚ùå Twilio no est√° configurado correctamente")
        return False
    
    try:
        # Asegurar formato correcto del n√∫mero
        if not to_number.startswith("+"):
            to_number = "+" + to_number
        
        # Enviar mensaje
        message_instance = twilio_client.messages.create(
            body=message[:1600],  # Twilio tiene l√≠mite de 1600 caracteres
            from_=TWILIO_WHATSAPP_NUMBER,
            to=f"whatsapp:{to_number}"
        )
        
        logger.info(f"‚úÖ Mensaje enviado v√≠a Twilio. SID: {message_instance.sid}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error enviando mensaje v√≠a Twilio: {str(e)}")
        return False


def create_twilio_response(message: str) -> str:
    """
    Crea una respuesta TwiML para Twilio.
    
    Args:
        message: Texto del mensaje de respuesta
        
    Returns:
        str: Respuesta TwiML formateada
    """
    response = MessagingResponse()
    response.message(message[:1600])  # L√≠mite de caracteres de Twilio
    return str(response)


def validate_twilio_webhook(request_url: str, signature: str, params: dict) -> bool:
    """
    Valida que el webhook viene realmente de Twilio.
    
    Args:
        request_url: URL del webhook
        signature: Firma X-Twilio-Signature del header
        params: Par√°metros del webhook
        
    Returns:
        bool: True si la firma es v√°lida
    """
    if not TWILIO_AUTH_TOKEN:
        logger.warning("‚ö†Ô∏è No se puede validar webhook: TWILIO_AUTH_TOKEN no configurado")
        return True  # En desarrollo, permitir sin validaci√≥n
    
    try:
        from twilio.request_validator import RequestValidator
        validator = RequestValidator(TWILIO_AUTH_TOKEN)
        return validator.validate(request_url, params, signature)
    except Exception as e:
        logger.error(f"‚ùå Error validando webhook de Twilio: {str(e)}")
        return False


# Funci√≥n helper para logging de configuraci√≥n
def log_twilio_config():
    """Registra el estado de la configuraci√≥n de Twilio."""
    logger.info("üîß Configuraci√≥n de Twilio:")
    logger.info(f"   ACCOUNT_SID: {'‚úÖ Configurado' if TWILIO_ACCOUNT_SID else '‚ùå No configurado'}")
    logger.info(f"   AUTH_TOKEN: {'‚úÖ Configurado' if TWILIO_AUTH_TOKEN else '‚ùå No configurado'}")
    logger.info(f"   WHATSAPP_NUMBER: {TWILIO_WHATSAPP_NUMBER or '‚ùå No configurado'}")
    logger.info(f"   Cliente inicializado: {'‚úÖ S√≠' if twilio_client else '‚ùå No'}") 